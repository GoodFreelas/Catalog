version: '3.8'

services:
  # Backend API
  backend:
    build: ./backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - TINY_CLIENT_ID=${TINY_CLIENT_ID}
      - TINY_CLIENT_SECRET=${TINY_CLIENT_SECRET}
      - FRONTEND_URL=http://localhost:5173
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (desenvolvimento)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3001/api
      - VITE_WHATSAPP_NUMBER=${WHATSAPP_NUMBER}
      - VITE_STORE_NAME=${STORE_NAME}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  backend_data:
  redis_data:

---

# backend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Instalar dependências
COPY package*.json ./
RUN npm ci --only=production

# Copiar código
COPY . .

# Criar diretório para dados
RUN mkdir -p /app/data

# Expor porta
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Comando de inicialização
CMD ["npm", "start"]

---

# frontend/Dockerfile.dev
FROM node:18-alpine

WORKDIR /app

# Instalar dependências
COPY package*.json ./
RUN npm install

# Expor porta do Vite
EXPOSE 5173

# Comando de desenvolvimento
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

---

# frontend/Dockerfile (produção)
FROM node:18-alpine as build

WORKDIR /app

# Instalar dependências
COPY package*.json ./
RUN npm ci

# Copiar código e fazer build
COPY . .
RUN npm run build

# Usar nginx para servir arquivos estáticos
FROM nginx:alpine

# Copiar build
COPY --from=build /app/dist /usr/share/nginx/html

# Configuração do nginx
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

---

# .dockerignore
# Backend
backend/node_modules
backend/data
backend/.env
backend/npm-debug.log*
backend/yarn-debug.log*
backend/yarn-error.log*

# Frontend
frontend/node_modules
frontend/dist
frontend/.env
frontend/npm-debug.log*
frontend/yarn-debug.log*
frontend/yarn-error.log*

# Git
.git
.gitignore

# Docker
Dockerfile*
docker-compose*

# Documentation
README.md
*.md

# OS
.DS_Store
Thumbs.db

---

# .env.example (raiz do projeto)
# Tiny ERP Configuration
TINY_CLIENT_ID=tiny-api-fc122c057e6aa6d149852831fb427919d2d578c5-1749246867
TINY_CLIENT_SECRET=PsRzcPUtY7rH6TskiC926y2uOQq52rXU

# Store Configuration
WHATSAPP_NUMBER=5551999999999
STORE_NAME=Minha Loja
STORE_LOGO=/assets/logo.png

# Development URLs
BACKEND_URL=http://localhost:3001
FRONTEND_URL=http://localhost:5173