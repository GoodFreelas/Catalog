import { CONFIG } from '../utils/constants';
import { formatters } from '../utils/formatters';

export class WhatsAppService {
  constructor() {
    this.number = CONFIG.whatsapp.number;
    this.baseMessage = CONFIG.whatsapp.message;
  }

  // Gerar mensagem formatada do carrinho
  generateCartMessage(cart, customerInfo = {}) {
    let message = `${this.baseMessage}\n\n`;

    // Informa√ß√µes do cliente (se fornecidas)
    if (customerInfo.name) {
      message += `üë§ *Cliente:* ${customerInfo.name}\n`;
    }
    if (customerInfo.phone) {
      message += `üì± *Telefone:* ${customerInfo.phone}\n`;
    }
    if (customerInfo.email) {
      message += `üìß *Email:* ${customerInfo.email}\n`;
    }

    if (Object.keys(customerInfo).length > 0) {
      message += '\n';
    }

    message += `üõí *PEDIDO:*\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

    // Lista de produtos
    cart.forEach((item, index) => {
      message += `${index + 1}. *${item.nome}*\n`;
      message += `   üì¶ C√≥digo: ${item.codigo}\n`;
      message += `   üî¢ Quantidade: ${item.quantity}\n`;
      message += `   üí∞ Pre√ßo unit√°rio: ${formatters.currency(item.preco)}\n`;
      message += `   üíµ Subtotal: ${formatters.currency(item.preco * item.quantity)}\n\n`;
    });

    // Total
    const total = cart.reduce((sum, item) => sum + (item.preco * item.quantity), 0);
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `üßÆ *TOTAL: ${formatters.currency(total)}*\n\n`;

    // Informa√ß√µes adicionais
    message += `üìù *Observa√ß√µes:*\n`;
    message += `‚Ä¢ Aguardando confirma√ß√£o do pedido\n`;
    message += `‚Ä¢ Forma de pagamento a combinar\n`;
    message += `‚Ä¢ Prazo de entrega a confirmar\n\n`;

    message += `‚è∞ Pedido enviado em: ${formatters.date(new Date())}\n`;
    message += `üè™ ${CONFIG.loja.nome}`;

    return message;
  }

  // Gerar mensagem para produto √∫nico
  generateProductMessage(product, quantity = 1) {
    let message = `Ol√°! Tenho interesse neste produto:\n\n`;

    message += `üì± *${product.nome}*\n`;
    message += `üì¶ C√≥digo: ${product.codigo}\n`;
    message += `üí∞ Pre√ßo: ${formatters.currency(product.preco)}\n`;
    message += `üî¢ Quantidade desejada: ${quantity}\n`;

    if (product.descricao) {
      message += `üìù Descri√ß√£o: ${formatters.truncate(product.descricao, 100)}\n`;
    }

    const total = product.preco * quantity;
    message += `\nüíµ *Total: ${formatters.currency(total)}*\n\n`;

    message += `Poderia me enviar mais informa√ß√µes?\n\n`;
    message += `üè™ ${CONFIG.loja.nome}`;

    return message;
  }

  // Gerar mensagem de d√∫vida sobre produto
  generateInquiryMessage(product) {
    let message = `Ol√°! Gostaria de tirar uma d√∫vida sobre este produto:\n\n`;

    message += `üì± *${product.nome}*\n`;
    message += `üì¶ C√≥digo: ${product.codigo}\n`;
    message += `üí∞ Pre√ßo: ${formatters.currency(product.preco)}\n\n`;

    message += `Poderia me ajudar com mais informa√ß√µes?\n\n`;
    message += `üè™ ${CONFIG.loja.nome}`;

    return message;
  }

  // Abrir WhatsApp com mensagem
  openWhatsApp(message) {
    const encodedMessage = encodeURIComponent(message);
    const url = `https://wa.me/${this.number}?text=${encodedMessage}`;
    window.open(url, '_blank');
  }

  // Enviar carrinho
  sendCart(cart, customerInfo = {}) {
    if (!cart || cart.length === 0) {
      throw new Error('Carrinho vazio');
    }

    const message = this.generateCartMessage(cart, customerInfo);
    this.openWhatsApp(message);
  }

  // Enviar produto √∫nico
  sendProduct(product, quantity = 1) {
    if (!product) {
      throw new Error('Produto n√£o informado');
    }

    const message = this.generateProductMessage(product, quantity);
    this.openWhatsApp(message);
  }

  // Enviar d√∫vida sobre produto
  sendInquiry(product) {
    if (!product) {
      throw new Error('Produto n√£o informado');
    }

    const message = this.generateInquiryMessage(product);
    this.openWhatsApp(message);
  }

  // Validar n√∫mero do WhatsApp
  static validateNumber(number) {
    // Remove todos os caracteres n√£o num√©ricos
    const cleaned = number.replace(/\D/g, '');

    // Verifica se √© um n√∫mero brasileiro v√°lido
    const brazilPattern = /^55\d{10,11}$/;

    return brazilPattern.test(cleaned);
  }

  // Formatar n√∫mero para padr√£o internacional
  static formatNumber(number) {
    const cleaned = number.replace(/\D/g, '');

    // Se j√° tem c√≥digo do pa√≠s, retorna como est√°
    if (cleaned.startsWith('55') && cleaned.length >= 12) {
      return cleaned;
    }

    // Se √© n√∫mero brasileiro sem c√≥digo do pa√≠s
    if (cleaned.length === 10 || cleaned.length === 11) {
      return `55${cleaned}`;
    }

    return cleaned;
  }
}

// Inst√¢ncia singleton
export const whatsappService = new WhatsAppService();